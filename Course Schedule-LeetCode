import java.util.*;
class Solution {

    static class Edge{
        int src;
        int dest;

        public Edge(int s,int d){
            this.src=s;
            this.dest=d;
            
        }
    }
     public static void createGraph(ArrayList<Edge> graph[],int[][] prerequisites){
        for(int i=0;i<graph.length;i++){
            graph[i]=new ArrayList<Edge>();
        }
        for(int i=0;i<prerequisites.length;i++){
            for(int j=0;j<prerequisites[0].length-1;j++){
                graph[prerequisites[i][j]].add(new Edge(prerequisites[i][j],prerequisites[i][j+1]));
            }
        }

       
    }

    public static boolean canFinish(int numCourses, int[][] prerequisites) {
        int V =numCourses;
        ArrayList<Edge> graph[]=new ArrayList[V];
        createGraph(graph,prerequisites);
        
        return !isCycleDirected(graph,new boolean[V],0,new boolean[V]);
   
    }
    public static boolean isCycleDirected(ArrayList<Edge> graph[],boolean vis[],int curr,boolean rec[]){

    vis[curr]=true;
    rec[curr]=true;

    for(int i=0;i<graph[curr].size();i++){
        Edge e=graph[curr].get(i);
        if(rec[e.dest]){
            return true;
        }
        else if(!vis[e.dest]){
          if(isCycleDirected(graph,vis,e.dest,rec)){
            return true;
          }
        }
    }
    rec[curr]=false;
    return false;
}
public static void main(String[] args){
    int V=2;
    int prerequisites[][]={{1,0},{0,1}};
    System.out.print(canFinish(V,prerequisites));

}

}
